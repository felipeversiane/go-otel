version: '3.9'

services:
  db:
    env_file: .env
    container_name: pg03
    build:
      context: .
      dockerfile: build/database/Dockerfile
    volumes:
      - local_postgres_data:/var/lib/postgresql/data
    ports:
       - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    networks:
      - golangnetwork
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -q -d ${POSTGRES_DB} -U ${POSTGRES_USER} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s

  migrate:
    image: migrate/migrate
    container_name: mg02
    volumes:
      - ./migrations:/migrations
    command: [
      "-path", "/migrations",
      "-database", 
      "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable",
      "up"
    ]
    depends_on:
      db:
        condition: service_healthy
    networks:
      - golangnetwork

  api:
    env_file: .env
    build:
      context: .
      dockerfile: build/server/Dockerfile
    image: app
    container_name: go02
    restart: unless-stopped
    depends_on:
      - migrate
    networks:
      - golangnetwork
    expose:
      - "${API_PORT}"

  nginx:
    image: nginx:alpine
    container_name: nx02
    ports:
      - "8000:8000"
    volumes:
      - ./conf/nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - api
    networks:
      - golangnetwork

volumes:
  local_postgres_data: {}

networks:
  golangnetwork:
