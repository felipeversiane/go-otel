version: '3.9'

services:
  db:
    env_file: .env
    container_name: pg03
    build:
      context: .
      dockerfile: build/database/Dockerfile
    volumes:
      - local_postgres_data:/var/lib/postgresql/data
      - ./conf/postgres/:/docker-entrypoint-initdb.d/
    ports:
      - "5432:5432"
    networks:
      - golangnetwork
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -q -d postgres -U postgres || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    command:
      [
        "postgres",
        "-c","config_file=/docker-entrypoint-initdb.d/postgres.conf",
      ]

  migrate:
    image: migrate/migrate
    container_name: mg03
    volumes:
      - ./migrations:/migrations
    command: [
      "-path", "/migrations",
      "-database", 
      "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable",
      "up"
    ]
    depends_on:
      db:
        condition: service_healthy
    networks:
      - golangnetwork

  api:
    env_file: .env
    build:
      context: .
      dockerfile: build/server/Dockerfile
    image: app
    container_name: go03
    restart: unless-stopped
    depends_on:
      - migrate
    networks:
      - golangnetwork
    expose:
      - "${API_PORT}"

  nginx:
    image: nginx:alpine
    container_name: nx03
    ports:
      - "8000:8000"
    volumes:
      - ./conf/nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - api
    networks:
      - golangnetwork
    
  jaeger-all-in-one:
    container_name: jaeger03
    image: jaegertracing/all-in-one:latest
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "9411:9411"
      - "14250:14250"

  otel-collector:
    container_name: collector03
    image: otel/opentelemetry-collector-contrib:0.53.0
    command: ["--config=/conf/collector/collector.conf"]
    volumes:
      - ./conf/collector/collector.conf:/conf/collector/collector.conf
    ports:
      - "1888:1888"   # pprof extension
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver
      - "55679:55679" # zpages extension
    depends_on:
      - jaeger-all-in-one

  prometheus:
    container_name: prometheus03
    image: prom/prometheus:latest
    restart: always
    volumes:
      - ./conf/prometheus/prometheus.conf:/etc/prometheus/prometheus.conf
    ports:
      - "9090:9090"

volumes:
  local_postgres_data: {}

networks:
  golangnetwork:
